//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MilitaryAirfield.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MilitaryAirfieldEntities4 : DbContext
    {
        public MilitaryAirfieldEntities4()
            : base("name=MilitaryAirfieldEntities4")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<LoginModel> LoginModel { get; set; }
        public virtual DbSet<RegisterModel> RegisterModel { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<Воздушное_судно> Воздушное_судно { get; set; }
        public virtual DbSet<Вооружение> Вооружение { get; set; }
        public virtual DbSet<Используемая_экипировка> Используемая_экипировка { get; set; }
        public virtual DbSet<Навигационная_система> Навигационная_система { get; set; }
        public virtual DbSet<Полеты> Полеты { get; set; }
        public virtual DbSet<Сотрудник_аэродрома> Сотрудник_аэродрома { get; set; }
        public virtual DbSet<Сотрудник_Воздушное_судно> Сотрудник_Воздушное_судно { get; set; }
        public virtual DbSet<Топливная_система> Топливная_система { get; set; }
        public virtual DbSet<Узлы_маневрирования> Узлы_маневрирования { get; set; }
    
        [DbFunction("MilitaryAirfieldEntities4", "nagruzka")]
        public virtual IQueryable<nagruzka_Result> nagruzka()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<nagruzka_Result>("[MilitaryAirfieldEntities4].[nagruzka]()");
        }
    
        [DbFunction("MilitaryAirfieldEntities4", "strelok")]
        public virtual IQueryable<strelok_Result> strelok()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<strelok_Result>("[MilitaryAirfieldEntities4].[strelok]()");
        }
    
        public virtual int dobavlenie(Nullable<int> kol_vo, string mesto_pribitiya, string mesto_vileta, Nullable<System.DateTime> time_vileta, Nullable<bool> boevoj_vilet)
        {
            var kol_voParameter = kol_vo.HasValue ?
                new ObjectParameter("kol_vo", kol_vo) :
                new ObjectParameter("kol_vo", typeof(int));
    
            var mesto_pribitiyaParameter = mesto_pribitiya != null ?
                new ObjectParameter("mesto_pribitiya", mesto_pribitiya) :
                new ObjectParameter("mesto_pribitiya", typeof(string));
    
            var mesto_viletaParameter = mesto_vileta != null ?
                new ObjectParameter("mesto_vileta", mesto_vileta) :
                new ObjectParameter("mesto_vileta", typeof(string));
    
            var time_viletaParameter = time_vileta.HasValue ?
                new ObjectParameter("time_vileta", time_vileta) :
                new ObjectParameter("time_vileta", typeof(System.DateTime));
    
            var boevoj_viletParameter = boevoj_vilet.HasValue ?
                new ObjectParameter("boevoj_vilet", boevoj_vilet) :
                new ObjectParameter("boevoj_vilet", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dobavlenie", kol_voParameter, mesto_pribitiyaParameter, mesto_viletaParameter, time_viletaParameter, boevoj_viletParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int udalenie()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("udalenie");
        }
    }
}
